using System.Linq;
using Bindables.Test;
using NUnit.Framework;

namespace Bindables.Forms.Test.BindableProperty;

[TestFixture]
public class ReadOnlyProperty : FormsTestBase
{
	private const string SourceCode = @"
using Bindables.Forms;
using Xamarin.Forms;

namespace Test
{
	public partial class FormsClass : BindableObject
	{
		[BindableProperty(typeof(int))]
		private static readonly BindablePropertyKey Example1PropertyKey;

		[BindableProperty(typeof(string))]
		private static readonly BindablePropertyKey Example2PropertyKey;
	}
}";

	private const string ExpectedSourceCode = @"
// Generated by Bindables
using Xamarin.Forms;

#nullable enable

namespace Test
{
    public partial class FormsClass
    {
        public static readonly BindableProperty Example1Property;

        public int Example1
        {
            get => (int)GetValue(Example1Property);
            private set => SetValue(Example1PropertyKey, value);
        }

        public static readonly BindableProperty Example2Property;

        public string? Example2
        {
            get => (string?)GetValue(Example2Property);
            private set => SetValue(Example2PropertyKey, value);
        }

        static FormsClass()
        {
            Example1PropertyKey = BindableProperty.CreateReadOnly(
                nameof(Example1),
                typeof(int),
                typeof(FormsClass),
                default);
            
            Example1Property = Example1PropertyKey.BindableProperty;
            
            Example2PropertyKey = BindableProperty.CreateReadOnly(
                nameof(Example2),
                typeof(string),
                typeof(FormsClass),
                default);
            
            Example2Property = Example2PropertyKey.BindableProperty;
            
        }
    }
}";

	[Test]
	public void Test()
	{
		TestResult result = Generate<BindablePropertyGenerator>(SourceCode);
		CheckResult(result);
		
		Assert.That(result.SyntaxTrees, Has.Count.EqualTo(1));
		Assert.That(result.SyntaxTrees.Single().ToString().Trim(), Is.EqualTo(ExpectedSourceCode.Trim()));
	}
}