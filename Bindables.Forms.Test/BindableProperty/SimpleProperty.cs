using System.Linq;
using Bindables.Test;
using NUnit.Framework;

namespace Bindables.Forms.Test.BindableProperty;

[TestFixture]
public class SimpleProperty : FormsTestBase
{
	private const string SourceCode = @"
using Xamarin.Forms;
using Bindables.Forms;

public partial class FormsClass : BindableObject
{
    private static readonly string DefaultValue = ""Test"";

	[BindableProperty(typeof(int))]
	public static readonly BindableProperty Example1Property;

	[BindableProperty(typeof(int), OnPropertyChanged = nameof(PropertyChangedCallback))]
	public static readonly BindableProperty Example2Property;

	[BindableProperty(typeof(string), DefaultValueField = nameof(DefaultValue))]
	public static readonly BindableProperty Example3Property;

	[BindableProperty(typeof(string), BindingMode = BindingMode.OneTime)]
	public static readonly BindableProperty Example4Property;

	[BindableProperty(typeof(string), OnPropertyChanged = nameof(PropertyChangedCallback), DefaultValueField = nameof(DefaultValue))]
	public static readonly BindableProperty Example5Property;

	[BindableProperty(typeof(string), OnPropertyChanged = nameof(PropertyChangedCallback), DefaultValueField = nameof(DefaultValue), BindingMode = BindingMode.OneTime)]
	public static readonly BindableProperty Example6Property;

    private static void PropertyChangedCallback(BindableObject obj, object oldValue, object newValue)
    {
    }
}";

	private const string ExpectedSourceCode = @"
// Generated by Bindables
using Xamarin.Forms;

#nullable enable

public partial class FormsClass
{
    public int Example1
    {
        get => (int)GetValue(Example1Property);
        set => SetValue(Example1Property, value);
    }

    public int Example2
    {
        get => (int)GetValue(Example2Property);
        set => SetValue(Example2Property, value);
    }

    public string? Example3
    {
        get => (string?)GetValue(Example3Property);
        set => SetValue(Example3Property, value);
    }

    public string? Example4
    {
        get => (string?)GetValue(Example4Property);
        set => SetValue(Example4Property, value);
    }

    public string? Example5
    {
        get => (string?)GetValue(Example5Property);
        set => SetValue(Example5Property, value);
    }

    public string? Example6
    {
        get => (string?)GetValue(Example6Property);
        set => SetValue(Example6Property, value);
    }

    static FormsClass()
    {
        Example1Property = BindableProperty.Create(
            nameof(Example1),
            typeof(int),
            typeof(FormsClass),
            default);
        
        Example2Property = BindableProperty.Create(
            nameof(Example2),
            typeof(int),
            typeof(FormsClass),
            default,
            propertyChanged: PropertyChangedCallback);
        
        Example3Property = BindableProperty.Create(
            nameof(Example3),
            typeof(string),
            typeof(FormsClass),
            DefaultValue);
        
        Example4Property = BindableProperty.Create(
            nameof(Example4),
            typeof(string),
            typeof(FormsClass),
            default,
            defaultBindingMode: (BindingMode)4);
        
        Example5Property = BindableProperty.Create(
            nameof(Example5),
            typeof(string),
            typeof(FormsClass),
            DefaultValue,
            propertyChanged: PropertyChangedCallback);
        
        Example6Property = BindableProperty.Create(
            nameof(Example6),
            typeof(string),
            typeof(FormsClass),
            DefaultValue,
            defaultBindingMode: (BindingMode)4,
            propertyChanged: PropertyChangedCallback);
        
    }
}";

	[Test]
	public void Test()
	{
		TestResult result = Generate<BindablePropertyGenerator>(SourceCode);
		CheckResult(result);

		Assert.That(result.SyntaxTrees, Has.Count.EqualTo(1));
		Assert.That(result.SyntaxTrees.Single().ToString().Trim(), Is.EqualTo(ExpectedSourceCode.Trim()));
	}
}