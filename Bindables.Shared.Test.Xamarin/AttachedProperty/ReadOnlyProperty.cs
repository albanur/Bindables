using Bindables.Test;
using NUnit.Framework;

namespace Bindables.Xamarin.Test;

public abstract partial class XamarinAttachedPropertyTests<T> : TestBase<T> where T : PropertyGeneratorBase, new()
{
	[Test]
	public void ReadOnlyProperty()
	{
		const string sourceCodeTemplate = @"
using PlatformNamespace;
using AttributeNamespace;

namespace Test
{
	public partial class ExampleClass
	{
		[AttributeName(typeof(int))]
		private static readonly KeyPropertyType Example1PropertyKey;

		[AttributeName(typeof(string))]
		private static readonly KeyPropertyType Example2PropertyKey;
	}
}";

		const string expectedSourceCodeTemplate = @"
// Generated by Bindables
using PlatformNamespace;

#nullable enable

namespace Test
{
    public partial class ExampleClass
    {
        public static readonly PropertyType Example1Property;

        public static int GetExample1(BaseClassName target)
        {
            return (int)target.GetValue(Example1Property);
        }

        private static void SetExample1(BaseClassName target, int value)
        {
            target.SetValue(Example1Property, value);
        }

        public static readonly PropertyType Example2Property;

        public static string? GetExample2(BaseClassName target)
        {
            return (string?)target.GetValue(Example2Property);
        }

        private static void SetExample2(BaseClassName target, string? value)
        {
            target.SetValue(Example2Property, value);
        }

        static ExampleClass()
        {
            Example1PropertyKey = PropertyType.CreateAttachedReadOnly(
                ""Example1"",
                typeof(int),
                typeof(ExampleClass),
                default);
            
            Example1Property = Example1PropertyKey.PropertyType;
            
            Example2PropertyKey = PropertyType.CreateAttachedReadOnly(
                ""Example2"",
                typeof(string),
                typeof(ExampleClass),
                default);
            
            Example2Property = Example2PropertyKey.PropertyType;
            
        }
    }
}";

		TestSourceCodeTemplate(sourceCodeTemplate, expectedSourceCodeTemplate);
	}
}