using NUnit.Framework;

namespace Bindables.Xamarin.Test;

public abstract partial class XamarinAttachedPropertyTests<T>
{
	[Test]
	public void RegularProperty()
	{
		const string sourceCodeTemplate = @"
using PlatformNamespace;
using AttributeNamespace;

public partial class ExampleClass
{
    private static readonly string DefaultValue = ""Test"";

	[AttributeName(typeof(int))]
	public static readonly PropertyType Example1Property;

	[AttributeName(typeof(int), OnPropertyChanged = nameof(PropertyChangedCallback))]
	public static readonly PropertyType Example2Property;

	[AttributeName(typeof(string), DefaultValueField = nameof(DefaultValue))]
	public static readonly PropertyType Example3Property;

	[AttributeName(typeof(string), BindingMode = BindingMode.OneTime)]
	public static readonly PropertyType Example4Property;

	[AttributeName(typeof(string), OnPropertyChanged = nameof(PropertyChangedCallback), DefaultValueField = nameof(DefaultValue))]
	public static readonly PropertyType Example5Property;

	[AttributeName(typeof(string), OnPropertyChanged = nameof(PropertyChangedCallback), DefaultValueField = nameof(DefaultValue), BindingMode = BindingMode.OneTime)]
	public static readonly PropertyType Example6Property;

    private static void PropertyChangedCallback(BindableObject obj, object oldValue, object newValue)
    {
    }
}";

		const string expectedSourceCodeTemplate = @"
// Generated by Bindables
using PlatformNamespace;

#nullable enable

public partial class ExampleClass
{
    public static int GetExample1(BaseClassName target)
    {
        return (int)target.GetValue(Example1Property);
    }

    public static void SetExample1(BaseClassName target, int value)
    {
        target.SetValue(Example1Property, value);
    }

    public static int GetExample2(BaseClassName target)
    {
        return (int)target.GetValue(Example2Property);
    }

    public static void SetExample2(BaseClassName target, int value)
    {
        target.SetValue(Example2Property, value);
    }

    public static string? GetExample3(BaseClassName target)
    {
        return (string?)target.GetValue(Example3Property);
    }

    public static void SetExample3(BaseClassName target, string? value)
    {
        target.SetValue(Example3Property, value);
    }

    public static string? GetExample4(BaseClassName target)
    {
        return (string?)target.GetValue(Example4Property);
    }

    public static void SetExample4(BaseClassName target, string? value)
    {
        target.SetValue(Example4Property, value);
    }

    public static string? GetExample5(BaseClassName target)
    {
        return (string?)target.GetValue(Example5Property);
    }

    public static void SetExample5(BaseClassName target, string? value)
    {
        target.SetValue(Example5Property, value);
    }

    public static string? GetExample6(BaseClassName target)
    {
        return (string?)target.GetValue(Example6Property);
    }

    public static void SetExample6(BaseClassName target, string? value)
    {
        target.SetValue(Example6Property, value);
    }

    static ExampleClass()
    {
        Example1Property = PropertyType.CreateAttached(
            ""Example1"",
            typeof(int),
            typeof(ExampleClass),
            default);
        
        Example2Property = PropertyType.CreateAttached(
            ""Example2"",
            typeof(int),
            typeof(ExampleClass),
            default,
            propertyChanged: PropertyChangedCallback);
        
        Example3Property = PropertyType.CreateAttached(
            ""Example3"",
            typeof(string),
            typeof(ExampleClass),
            DefaultValue);
        
        Example4Property = PropertyType.CreateAttached(
            ""Example4"",
            typeof(string),
            typeof(ExampleClass),
            default,
            defaultBindingMode: (BindingMode)4);
        
        Example5Property = PropertyType.CreateAttached(
            ""Example5"",
            typeof(string),
            typeof(ExampleClass),
            DefaultValue,
            propertyChanged: PropertyChangedCallback);
        
        Example6Property = PropertyType.CreateAttached(
            ""Example6"",
            typeof(string),
            typeof(ExampleClass),
            DefaultValue,
            defaultBindingMode: (BindingMode)4,
            propertyChanged: PropertyChangedCallback);
        
    }
}";

		TestSourceCodeTemplate(sourceCodeTemplate, expectedSourceCodeTemplate);
	}
}
