using System.Linq;
using Bindables.Test;
using NUnit.Framework;

namespace Bindables.Wpf.Test.AttachedProperty;

[TestFixture]
public class ReadOnlyProperty : WpfTestBase
{
	private const string SourceCode = @"
using System.Windows;
using Bindables.Wpf;

namespace Test
{
	public partial class WpfClass
	{
		[AttachedProperty(typeof(int))]
		private static readonly DependencyPropertyKey Example1PropertyKey;

		[AttachedProperty(typeof(string))]
		private static readonly DependencyPropertyKey Example2PropertyKey;
	}
}";

	private const string ExpectedSourceCode = @"
// Generated by Bindables
using System.Windows;

#nullable enable

namespace Test
{
    public partial class WpfClass
    {
        public static readonly DependencyProperty Example1Property;

        public static int GetExample1(DependencyObject target)
        {
            return (int)target.GetValue(Example1Property);
        }

        private static void SetExample1(DependencyObject target, int value)
        {
            target.SetValue(Example1Property, value);
        }

        public static readonly DependencyProperty Example2Property;

        public static string? GetExample2(DependencyObject target)
        {
            return (string?)target.GetValue(Example2Property);
        }

        private static void SetExample2(DependencyObject target, string? value)
        {
            target.SetValue(Example2Property, value);
        }

        static WpfClass()
        {
            Example1PropertyKey = DependencyProperty.RegisterAttachedReadOnly(
                ""Example1"",
                typeof(int),
                typeof(WpfClass),
                new FrameworkPropertyMetadata());
            
            Example1Property = Example1PropertyKey.DependencyProperty;
            
            Example2PropertyKey = DependencyProperty.RegisterAttachedReadOnly(
                ""Example2"",
                typeof(string),
                typeof(WpfClass),
                new FrameworkPropertyMetadata());
            
            Example2Property = Example2PropertyKey.DependencyProperty;
            
        }
    }
}";

	[Test]
	public void Test()
	{
		TestResult result = Generate<AttachedPropertyGenerator>(SourceCode);
		CheckResult(result);
		
		Assert.That(result.SyntaxTrees, Has.Count.EqualTo(1));
		Assert.That(result.SyntaxTrees.Single().ToString().Trim(), Is.EqualTo(ExpectedSourceCode.Trim()));
	}
}