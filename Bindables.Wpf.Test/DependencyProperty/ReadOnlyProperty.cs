using System.Linq;
using Bindables.Test;
using NUnit.Framework;

namespace Bindables.Wpf.Test.DependencyProperty;

[TestFixture]
public class ReadOnlyProperty : WpfTestBase
{
	private const string SourceCode = @"
using System.Windows;
using Bindables.Wpf;

namespace Test
{
	public partial class WpfClass : DependencyObject
	{
		[DependencyProperty(typeof(int))]
		public static readonly DependencyPropertyKey Example1PropertyKey;

		[DependencyProperty(typeof(string))]
		public static readonly DependencyPropertyKey Example2PropertyKey;
	}
}";

	private const string ExpectedSourceCode = @"
// Generated by Bindables
using System.Windows;

#nullable enable

namespace Test
{
    public partial class WpfClass
    {
        public static readonly DependencyProperty Example1Property;

        public int Example1
        {
            get => (int)GetValue(Example1Property);
            private set => SetValue(Example1PropertyKey, value);
        }

        public static readonly DependencyProperty Example2Property;

        public string? Example2
        {
            get => (string?)GetValue(Example2Property);
            private set => SetValue(Example2PropertyKey, value);
        }

        static WpfClass()
        {
            Example1PropertyKey = DependencyProperty.RegisterReadOnly(
                nameof(Example1),
                typeof(int),
                typeof(WpfClass),
                new FrameworkPropertyMetadata());
            
            Example1Property = Example1PropertyKey.DependencyProperty;
            
            Example2PropertyKey = DependencyProperty.RegisterReadOnly(
                nameof(Example2),
                typeof(string),
                typeof(WpfClass),
                new FrameworkPropertyMetadata());
            
            Example2Property = Example2PropertyKey.DependencyProperty;
            
        }
    }
}";

	[Test]
	public void Test()
	{
		TestResult result = Generate<DependencyPropertyGenerator>(SourceCode);
		CheckResult(result);
		
		Assert.That(result.SyntaxTrees, Has.Count.EqualTo(1));
		Assert.That(result.SyntaxTrees.Single().ToString().Trim(), Is.EqualTo(ExpectedSourceCode.Trim()));
	}
}