using System.Linq;
using Bindables.Test;
using NUnit.Framework;

namespace Bindables.Wpf.Test.DependencyProperty;

[TestFixture]
public class SimpleProperty : WpfTestBase
{
	private const string SourceCode = @"
using System.Windows;
using Bindables.Wpf;

public partial class WpfClass : DependencyObject
{
	private static readonly string DefaultValue = ""Test"";

	[DependencyProperty(typeof(int))]
	public static readonly DependencyProperty Example1Property;

	[DependencyProperty(typeof(int), OnPropertyChanged = nameof(PropertyChangedCallback))]
	public static readonly DependencyProperty Example2Property;

	[DependencyProperty(typeof(string), DefaultValueField = nameof(DefaultValue))]
	public static readonly DependencyProperty Example3Property;

	[DependencyProperty(typeof(string), Options = FrameworkPropertyMetadataOptions.BindsTwoWayByDefault)]
	public static readonly DependencyProperty Example4Property;

	[DependencyProperty(typeof(string), OnPropertyChanged = nameof(PropertyChangedCallback), DefaultValueField = nameof(DefaultValue))]
	public static readonly DependencyProperty Example5Property;

	[DependencyProperty(typeof(string), OnPropertyChanged = nameof(PropertyChangedCallback), DefaultValueField = nameof(DefaultValue), Options = FrameworkPropertyMetadataOptions.BindsTwoWayByDefault)]
	public static readonly DependencyProperty Example6Property;

	[DependencyProperty(typeof(int), OnCoerceValue = nameof(CoerceValueCallback))]
	public static readonly DependencyProperty Example7Property;

	[DependencyProperty(typeof(int), OnPropertyChanged = nameof(PropertyChangedCallback), OnCoerceValue = nameof(CoerceValueCallback))]
	public static readonly DependencyProperty Example8Property;

	[DependencyProperty(typeof(string), OnCoerceValue = nameof(CoerceValueCallback), DefaultValueField = nameof(DefaultValue))]
	public static readonly DependencyProperty Example9Property;

	[DependencyProperty(typeof(string), OnPropertyChanged = nameof(PropertyChangedCallback), OnCoerceValue = nameof(CoerceValueCallback), DefaultValueField = nameof(DefaultValue))]
	public static readonly DependencyProperty Example10Property;

	[DependencyProperty(typeof(string), OnCoerceValue = nameof(CoerceValueCallback), DefaultValueField = nameof(DefaultValue), Options = FrameworkPropertyMetadataOptions.BindsTwoWayByDefault)]
	public static readonly DependencyProperty Example11Property;

	[DependencyProperty(typeof(string), OnPropertyChanged = nameof(PropertyChangedCallback), OnCoerceValue = nameof(CoerceValueCallback), DefaultValueField = nameof(DefaultValue), Options = FrameworkPropertyMetadataOptions.BindsTwoWayByDefault)]
	public static readonly DependencyProperty Example12Property;

    private static void PropertyChangedCallback(DependencyObject obj, DependencyPropertyChangedEventArgs args)
    {
    }

	private static object CoerceValueCallback(DependencyObject obj, object value)
	{
		return """";
	}
}";

	private const string ExpectedSourceCode = @"
// Generated by Bindables
using System.Windows;

#nullable enable

public partial class WpfClass
{
    public int Example1
    {
        get => (int)GetValue(Example1Property);
        set => SetValue(Example1Property, value);
    }

    public int Example2
    {
        get => (int)GetValue(Example2Property);
        set => SetValue(Example2Property, value);
    }

    public string? Example3
    {
        get => (string?)GetValue(Example3Property);
        set => SetValue(Example3Property, value);
    }

    public string? Example4
    {
        get => (string?)GetValue(Example4Property);
        set => SetValue(Example4Property, value);
    }

    public string? Example5
    {
        get => (string?)GetValue(Example5Property);
        set => SetValue(Example5Property, value);
    }

    public string? Example6
    {
        get => (string?)GetValue(Example6Property);
        set => SetValue(Example6Property, value);
    }

    public int Example7
    {
        get => (int)GetValue(Example7Property);
        set => SetValue(Example7Property, value);
    }

    public int Example8
    {
        get => (int)GetValue(Example8Property);
        set => SetValue(Example8Property, value);
    }

    public string? Example9
    {
        get => (string?)GetValue(Example9Property);
        set => SetValue(Example9Property, value);
    }

    public string? Example10
    {
        get => (string?)GetValue(Example10Property);
        set => SetValue(Example10Property, value);
    }

    public string? Example11
    {
        get => (string?)GetValue(Example11Property);
        set => SetValue(Example11Property, value);
    }

    public string? Example12
    {
        get => (string?)GetValue(Example12Property);
        set => SetValue(Example12Property, value);
    }

    static WpfClass()
    {
        Example1Property = DependencyProperty.Register(
            nameof(Example1),
            typeof(int),
            typeof(WpfClass),
            new FrameworkPropertyMetadata());
        
        Example2Property = DependencyProperty.Register(
            nameof(Example2),
            typeof(int),
            typeof(WpfClass),
            new FrameworkPropertyMetadata(PropertyChangedCallback));
        
        Example3Property = DependencyProperty.Register(
            nameof(Example3),
            typeof(string),
            typeof(WpfClass),
            new FrameworkPropertyMetadata(DefaultValue));
        
        Example4Property = DependencyProperty.Register(
            nameof(Example4),
            typeof(string),
            typeof(WpfClass),
            new FrameworkPropertyMetadata(default, (FrameworkPropertyMetadataOptions)256));
        
        Example5Property = DependencyProperty.Register(
            nameof(Example5),
            typeof(string),
            typeof(WpfClass),
            new FrameworkPropertyMetadata(DefaultValue, PropertyChangedCallback));
        
        Example6Property = DependencyProperty.Register(
            nameof(Example6),
            typeof(string),
            typeof(WpfClass),
            new FrameworkPropertyMetadata(DefaultValue, (FrameworkPropertyMetadataOptions)256, PropertyChangedCallback));
        
        Example7Property = DependencyProperty.Register(
            nameof(Example7),
            typeof(int),
            typeof(WpfClass),
            new FrameworkPropertyMetadata(default, CoerceValueCallback));
        
        Example8Property = DependencyProperty.Register(
            nameof(Example8),
            typeof(int),
            typeof(WpfClass),
            new FrameworkPropertyMetadata(PropertyChangedCallback, CoerceValueCallback));
        
        Example9Property = DependencyProperty.Register(
            nameof(Example9),
            typeof(string),
            typeof(WpfClass),
            new FrameworkPropertyMetadata(DefaultValue, default, CoerceValueCallback));
        
        Example10Property = DependencyProperty.Register(
            nameof(Example10),
            typeof(string),
            typeof(WpfClass),
            new FrameworkPropertyMetadata(DefaultValue, PropertyChangedCallback, CoerceValueCallback));
        
        Example11Property = DependencyProperty.Register(
            nameof(Example11),
            typeof(string),
            typeof(WpfClass),
            new FrameworkPropertyMetadata(DefaultValue, (FrameworkPropertyMetadataOptions)256, default, CoerceValueCallback));
        
        Example12Property = DependencyProperty.Register(
            nameof(Example12),
            typeof(string),
            typeof(WpfClass),
            new FrameworkPropertyMetadata(DefaultValue, (FrameworkPropertyMetadataOptions)256, PropertyChangedCallback, CoerceValueCallback));
        
    }
}";

	[Test]
	public void Test()
	{
		TestResult result = Generate<DependencyPropertyGenerator>(SourceCode);
		CheckResult(result);

		Assert.That(result.SyntaxTrees, Has.Count.EqualTo(1));
		Assert.That(result.SyntaxTrees.Single().ToString().Trim(), Is.EqualTo(ExpectedSourceCode.Trim()));
	}
}